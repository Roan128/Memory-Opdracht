Non functionele eisen:

Het spel kan gespeeld worden in een Console applicatie.
De applicatie is opgebouwd in lagen, waarbij UI, Business en Data (persistence) gescheiden zijn.
De oplossing maakt gebruik van zelf gedefinieerde class libraries, classes, interfaces, enums, methods, properties, constructors, events, delegates en exceptions.
Kwaliteit is in de code aangebracht door o.a. dubbele code te vermijden, standaard naamgevingsconventies aan te houden, defensieve aard van de code en het voorzien van commentaar op een gestandaardiseerde manier.
Implementeer de applicatie in lagen waarbij het domein als een geïsoleerde laag getest kan worden met unit-testing. Er zijn unit-testen geschreven voor alle business functionaliteiten. Er wordt rekening gehouden met de impliciete scenario’s die voortvloeien uit de gestelde eisen.
De high-scores worden opgeslagen in het (file/database)systeem.

Test procedure:

Speel een spel in een console applicatie.
Schrijf een lijst van unit testen om de correcte werking van de gestelde eisen aan te tonen.
Voer de unit-testen uit.

Verduidelijking eisen:

Van iedere unieke kaart zijn er maximaal twee in een spel.
Kaarten worden willekeurig gepositioneerd bij ieder spel dat gespeeld wordt.
Wanneer het spel gestart wordt liggen alle kaarten omgekeerd.
Voor iedere unieke kaart is een duplicaat in het spel.
De weergave van de highscores bevat minimaal de naam van de speler, de score en het aantal kaarten van het gespeelde spel.
Het spel in de Console applicatie heeft standaard 5 unieke kaarten die bijvoorbeeld een nummer, teken, tekst of figuur met of zonder kleur weergeven.

Ondersteunende informatie:

Een memory spel is een spel waarbij meerdere kaarten op de kop de liggen. Per beurt mogen twee kaarten omgedraaid worden. 
Wanneer twee dezelfde kaarten omgedraaid worden, blijven ze omgedraaid liggen anders worden ze weer terug gedraaid. 
Wanneer alle kaarten omgedraaid zijn is het spel afgelopen en wordt de highscore getoond. 
Highscore Van de gespeelde spellen wordt een lijst van highscores bijgehouden.
Alleen wanneer een highscore in de top 10 komt, wordt de score opgeslagen. 
Het aantal kaarten, de tijd en het aantal pogingen bepalen de score. ((Aantal kaarten)2 / (Tijd in seconden * aantal pogingen)) * 1000

GAME (Console):
Begin:
1. Speler aanmaken

2. Op basis van cardamount kaarten aanmaken, dit verdubbelen.

3. Shuffelen van de list.

Per beurt
1. Meerdere kaarten op kop

2. Kaarten kiezen die je wilt omdraaien. (max 2 per ronde)

3.1 Als kaarten dezelfde value hebben: omgedraaid laten liggen.

3.2 Als kaarten niet dezelfde value hebben: terug omdraaien.

4. 1 t/m 3 blijft gebeuren tot alle kaarten zijn omgedraaid.

5. Als alles is omgedraaid wordt er een score berekend.

6. Vergelijken score met bestaande highscore.

8.1 Toevoegen score als hij in de top 10 staat.

8.2 Weggooien score als hij niet in de top 10 staat. 

9. Stoppen spel, afsluiten of terug naar hoofdmenu.